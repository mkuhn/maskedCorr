// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// masked_corr
double masked_corr(NumericVector v1, NumericVector v2, int mask, List mask_ranges);
RcppExport SEXP maskedCorr_masked_corr(SEXP v1SEXP, SEXP v2SEXP, SEXP maskSEXP, SEXP mask_rangesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< int >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< List >::type mask_ranges(mask_rangesSEXP);
    __result = Rcpp::wrap(masked_corr(v1, v2, mask, mask_ranges));
    return __result;
END_RCPP
}
// contains_singleton
bool contains_singleton(IntegerVector vs, int N_bits);
RcppExport SEXP maskedCorr_contains_singleton(SEXP vsSEXP, SEXP N_bitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< int >::type N_bits(N_bitsSEXP);
    __result = Rcpp::wrap(contains_singleton(vs, N_bits));
    return __result;
END_RCPP
}
// count_set_bits
int count_set_bits(IntegerVector vs);
RcppExport SEXP maskedCorr_count_set_bits(SEXP vsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type vs(vsSEXP);
    __result = Rcpp::wrap(count_set_bits(vs));
    return __result;
END_RCPP
}
// masks_to_int
int masks_to_int(IntegerVector masks, int bits_per_mask);
RcppExport SEXP maskedCorr_masks_to_int(SEXP masksSEXP, SEXP bits_per_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type masks(masksSEXP);
    Rcpp::traits::input_parameter< int >::type bits_per_mask(bits_per_maskSEXP);
    __result = Rcpp::wrap(masks_to_int(masks, bits_per_mask));
    return __result;
END_RCPP
}
// int_to_masks
IntegerVector int_to_masks(int int_masks, int bits_per_mask, int N_masks);
RcppExport SEXP maskedCorr_int_to_masks(SEXP int_masksSEXP, SEXP bits_per_maskSEXP, SEXP N_masksSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type int_masks(int_masksSEXP);
    Rcpp::traits::input_parameter< int >::type bits_per_mask(bits_per_maskSEXP);
    Rcpp::traits::input_parameter< int >::type N_masks(N_masksSEXP);
    __result = Rcpp::wrap(int_to_masks(int_masks, bits_per_mask, N_masks));
    return __result;
END_RCPP
}
// increment_mask
IntegerVector increment_mask(IntegerVector mask, int N_bits, bool skip_singletons, bool skip_zeros);
RcppExport SEXP maskedCorr_increment_mask(SEXP maskSEXP, SEXP N_bitsSEXP, SEXP skip_singletonsSEXP, SEXP skip_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type N_bits(N_bitsSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_singletons(skip_singletonsSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_zeros(skip_zerosSEXP);
    __result = Rcpp::wrap(increment_mask(mask, N_bits, skip_singletons, skip_zeros));
    return __result;
END_RCPP
}
// masks_to_target
IntegerVector masks_to_target(IntegerVector masks);
RcppExport SEXP maskedCorr_masks_to_target(SEXP masksSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type masks(masksSEXP);
    __result = Rcpp::wrap(masks_to_target(masks));
    return __result;
END_RCPP
}
